import React, { useState, useEffect } from 'react';
import { Section, Cell, Title, Caption, Text, Button, Divider } from '@telegram-apps/telegram-ui';
import { telegramService } from '../lib/telegram';
import { Stepper } from './Stepper';
import type { WorkoutSession } from '../types';

interface WorkoutLoggerProps {
  session: WorkoutSession;
  onFinish: () => void;
  onCancel: () => void;
}

export const WorkoutLogger: React.FC<WorkoutLoggerProps> = ({
  session,
  onFinish,
  onCancel
}) => {
  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(session.current_exercise_index || 0);
  const [completedSets, setCompletedSets] = useState<any[]>([]);
  const [reps, setReps] = useState(0);
  const [weight, setWeight] = useState(0);
  const [rpe, setRpe] = useState(8);
  const [elapsedTime, setElapsedTime] = useState(0);

  const currentExercise = session.exercises[currentExerciseIndex];
  const totalExercises = session.exercises.length;
  const currentSetNumber = completedSets.length + 1;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (currentExercise) {
      setReps(currentExercise.target_reps);
      setWeight(currentExercise.target_weight);
      setRpe(8);
      setCompletedSets([]);
    }
  }, [currentExerciseIndex, currentExercise]);

  // –¢–∞–π–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  useEffect(() => {
    const startTime = new Date(session.started_at).getTime();
    const interval = setInterval(() => {
      const now = Date.now();
      const elapsed = Math.floor((now - startTime) / 1000);
      setElapsedTime(elapsed);
    }, 1000);

    return () => clearInterval(interval);
  }, [session.started_at]);

  // BackButton –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  useEffect(() => {
    telegramService.showBackButton(() => {
      telegramService.showConfirm(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.',
        (confirmed) => {
          if (confirmed) {
            onCancel();
          }
        }
      );
    });

    return () => {
      telegramService.hideBackButton();
    };
  }, [onCancel]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (seconds: number) => {
    const h = Math.floor(seconds / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = seconds % 60;
    return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥–∞
  const handleCompleteSet = () => {
    const newSet = {
      set_no: currentSetNumber,
      reps,
      weight,
      rpe,
      timestamp: new Date().toISOString()
    };

    setCompletedSets([...completedSets, newSet]);

    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    console.log('Set completed:', newSet);

    // –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –ø–æ–¥—Ö–æ–¥—ã - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    if (currentSetNumber >= currentExercise.target_sets) {
      if (currentExerciseIndex < totalExercises - 1) {
        telegramService.showConfirm(
          '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É?',
          (confirmed) => {
            if (confirmed) {
              handleNextExercise();
            }
          }
        );
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        telegramService.showConfirm(
          '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
          () => {
            onFinish();
          }
        );
      }
    }
  };

  // –°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
  const handleNextExercise = () => {
    if (currentExerciseIndex < totalExercises - 1) {
      setCurrentExerciseIndex(currentExerciseIndex + 1);
    }
  };

  // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–¥—Ö–æ–¥
  const handleRepeatSet = () => {
    if (completedSets.length > 0) {
      const lastSet = completedSets[completedSets.length - 1];
      setReps(lastSet.reps);
      setWeight(lastSet.weight);
      setRpe(lastSet.rpe);
    }
  };

  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
  const handleSkipExercise = () => {
    telegramService.showConfirm(
      '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?',
      (confirmed) => {
        if (confirmed) {
          handleNextExercise();
        }
      }
    );
  };

  if (!currentExercise) {
    return (
      <div style={{ padding: '20px', textAlign: 'center' }}>
        <Text>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Text>
      </div>
    );
  }

  return (
    <div style={{ 
      minHeight: '100vh',
      paddingBottom: '40px',
      backgroundColor: 'var(--tg-theme-bg-color)'
    }}>
      {/* Header: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã + –¢–∞–π–º–µ—Ä */}
      <div style={{
        padding: '16px',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        backgroundColor: 'var(--tg-theme-secondary-bg-color)',
        marginBottom: '8px'
      }}>
        <Text weight="2" style={{ fontSize: '15px' }}>
          {session.program_name}
        </Text>
        <Caption level="1" style={{ fontSize: '14px', color: 'var(--tg-theme-hint-color)' }}>
          ‚è± {formatTime(elapsedTime)}
        </Caption>
      </div>

      {/* Progress */}
      <Section>
        <div style={{ padding: '12px 16px' }}>
          <Caption level="1" style={{ 
            fontSize: '14px', 
            color: 'var(--tg-theme-hint-color)',
            marginBottom: '8px',
            display: 'block'
          }}>
            üìä –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {currentExerciseIndex + 1} –∏–∑ {totalExercises}
          </Caption>
          {/* Progress Bar */}
          <div style={{
            width: '100%',
            height: '4px',
            backgroundColor: 'var(--tg-theme-secondary-bg-color)',
            borderRadius: '2px',
            overflow: 'hidden'
          }}>
            <div style={{
              width: `${((currentExerciseIndex + 1) / totalExercises) * 100}%`,
              height: '100%',
              backgroundColor: 'var(--tg-theme-button-color)',
              transition: 'width 0.3s ease'
            }} />
          </div>
        </div>
      </Section>

      {/* Exercise Title */}
      <div style={{ padding: '16px', textAlign: 'center' }}>
        <Title level="1" weight="2" style={{ fontSize: '28px', marginBottom: '8px' }}>
          üí™ {currentExercise.exercise_name}
        </Title>
        <Caption level="1" style={{ fontSize: '15px', color: 'var(--tg-theme-hint-color)' }}>
          {currentExercise.target_sets} –ø–æ–¥—Ö–æ–¥–∞ √ó {currentExercise.target_reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        </Caption>
      </div>

      {/* Notes (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
      {currentExercise.notes && (
        <Section>
          <Cell
            before="üí°"
            subtitle={currentExercise.notes}
            style={{
              backgroundColor: 'var(--tg-theme-secondary-bg-color)'
            }}
          >
            –ó–∞–º–µ—Ç–∫–∏
          </Cell>
        </Section>
      )}

      {/* Current Set */}
      <Section header={`–ü–æ–¥—Ö–æ–¥ ${currentSetNumber} –∏–∑ ${currentExercise.target_sets}`}>
        <div style={{ padding: '0 16px' }}>
          <Stepper
            label="–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
            value={reps}
            onChange={setReps}
            min={1}
            max={50}
            step={1}
          />

          <Stepper
            label="–í–µ—Å (–∫–≥)"
            value={weight}
            onChange={setWeight}
            min={0}
            max={500}
            step={2.5}
            suffix=" –∫–≥"
          />

          <Stepper
            label="RPE (1-10)"
            value={rpe}
            onChange={setRpe}
            min={1}
            max={10}
            step={1}
          />
        </div>
      </Section>

      {/* History of completed sets */}
      {completedSets.length > 0 && (
        <Section header="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥—Ö–æ–¥–æ–≤">
          {completedSets.map((set, index) => (
            <Cell
              key={index}
              before="‚úÖ"
              subtitle={`${set.reps} –ø–æ–≤—Ç ‚Ä¢ ${set.weight} –∫–≥ ‚Ä¢ RPE ${set.rpe}`}
            >
              –ü–æ–¥—Ö–æ–¥ {set.set_no}
            </Cell>
          ))}
        </Section>
      )}

      <Divider />

      {/* Actions */}
      <div style={{ padding: '16px', display: 'flex', flexDirection: 'column', gap: '12px' }}>
        <Button
          size="l"
          stretched
          mode="filled"
          onClick={handleCompleteSet}
          style={{ fontSize: '16px' }}
        >
          ‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥
        </Button>

        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>
          <Button
            size="m"
            mode="outline"
            onClick={handleSkipExercise}
            style={{ fontSize: '14px' }}
          >
            ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
          </Button>

          <Button
            size="m"
            mode="outline"
            onClick={handleRepeatSet}
            disabled={completedSets.length === 0}
            style={{ fontSize: '14px' }}
          >
            üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </Button>
        </div>
      </div>
    </div>
  );
};
