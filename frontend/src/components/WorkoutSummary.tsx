import React, { useEffect, useMemo } from 'react';
import { Section, Cell, Title, Caption, Text, Button } from '@telegram-apps/telegram-ui';
import { telegramService } from '../lib/telegram';

interface SetLog {
  exercise_id: string;
  exercise_name: string;
  set_no: number;
  reps: number;
  weight: number;
  rpe: number;
  timestamp: string;
}

interface WorkoutSummaryProps {
  programName: string;
  completedSets: SetLog[];
  duration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  totalExercises: number;
  onFinish: () => void;
}

export const WorkoutSummary: React.FC<WorkoutSummaryProps> = ({
  programName,
  completedSets,
  duration,
  totalExercises,
  onFinish
}) => {
  // –£–±–∏—Ä–∞–µ–º BackButton –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏—Ç–æ–≥–æ–≤
  useEffect(() => {
    telegramService.hideBackButton();
  }, []);

  // –†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const stats = useMemo(() => {
    const totalSets = completedSets.length;
    
    // –û–±—â–∏–π –≤–µ—Å (—Å—É–º–º–∞ reps * weight –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥–æ–≤)
    const totalWeight = completedSets.reduce((sum, set) => 
      sum + (set.reps * set.weight), 0
    );

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
    const exerciseMap = new Map<string, SetLog[]>();
    completedSets.forEach(set => {
      const existing = exerciseMap.get(set.exercise_id) || [];
      exerciseMap.set(set.exercise_id, [...existing, set]);
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
    const exerciseStats = Array.from(exerciseMap.values()).map(sets => {
      const totalReps = sets.reduce((sum, set) => sum + set.reps, 0);
      const maxWeight = Math.max(...sets.map(set => set.weight));
      
      return {
        name: sets[0].exercise_name,
        sets: sets.length,
        totalReps,
        maxWeight
      };
    });

    const completedExercises = exerciseMap.size;

    return {
      totalSets,
      totalWeight,
      completedExercises,
      exerciseStats
    };
  }, [completedSets]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatDuration = (seconds: number) => {
    const h = Math.floor(seconds / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = seconds % 60;
    
    if (h > 0) {
      return `${h}—á ${m}–º ${s}—Å`;
    } else if (m > 0) {
      return `${m}–º ${s}—Å`;
    } else {
      return `${s}—Å`;
    }
  };

  return (
    <div style={{ 
      minHeight: '100vh',
      paddingBottom: '40px',
      backgroundColor: 'var(--tg-theme-bg-color)'
    }}>
      {/* Header —Å celebration */}
      <div style={{
        padding: '32px 16px 24px',
        textAlign: 'center',
        backgroundColor: 'var(--tg-theme-secondary-bg-color)'
      }}>
        <div style={{ 
          fontSize: '48px', 
          marginBottom: '16px',
          lineHeight: '1'
        }}>
          üéâ üèãÔ∏è üéâ
        </div>
        <Title level="1" weight="2" style={{ fontSize: '28px', marginBottom: '8px' }}>
          –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
        </Title>
        <Caption level="1" style={{ fontSize: '15px', color: 'var(--tg-theme-hint-color)' }}>
          {programName}
        </Caption>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Section header="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
        <Cell
          before="‚è±"
          subtitle={formatDuration(duration)}
        >
          –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        </Cell>
        
        <Cell
          before="üí™"
          subtitle={`${stats.completedExercises} –∏–∑ ${totalExercises}`}
        >
          –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        </Cell>

        <Cell
          before="üìà"
          subtitle={`${stats.totalSets} ${stats.totalSets === 1 ? '–ø–æ–¥—Ö–æ–¥' : stats.totalSets < 5 ? '–ø–æ–¥—Ö–æ–¥–∞' : '–ø–æ–¥—Ö–æ–¥–æ–≤'}`}
        >
          –ü–æ–¥—Ö–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        </Cell>

        <Cell
          before="ÔøΩÔøΩÔ∏è"
          subtitle={`${Math.round(stats.totalWeight)} –∫–≥`}
        >
          –û–±—â–∏–π –≤–µ—Å
        </Cell>
      </Section>

      {/* –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π */}
      <Section header="üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è">
        {stats.exerciseStats.map((exercise, index) => (
          <Cell
            key={index}
            subtitle={
              <div>
                <div>{exercise.sets} {exercise.sets === 1 ? '–ø–æ–¥—Ö–æ–¥' : exercise.sets < 5 ? '–ø–æ–¥—Ö–æ–¥–∞' : '–ø–æ–¥—Ö–æ–¥–æ–≤'} ‚Ä¢ {exercise.totalReps} {exercise.totalReps === 1 ? '–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ' : exercise.totalReps < 5 ? '–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è' : '–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π'}</div>
                {exercise.maxWeight > 0 && (
                  <Caption level="1" style={{ marginTop: '4px' }}>
                    –ú–∞–∫—Å –≤–µ—Å: {exercise.maxWeight} –∫–≥
                  </Caption>
                )}
              </div>
            }
          >
            {index + 1}. {exercise.name}
          </Cell>
        ))}
      </Section>

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
      <div style={{ padding: '24px 16px' }}>
        <Button
          size="l"
          stretched
          mode="filled"
          onClick={onFinish}
          style={{ fontSize: '16px' }}
        >
          ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        </Button>
      </div>
    </div>
  );
};
